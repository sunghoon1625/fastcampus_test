import java.util.Scanner;

class Main {
	public static void main (String[] args){
		Scanner sc = new Scanner(System.in);

		int N = sc.nextInt();
		int M = sc.nextInt();

		char[][] map = new char[N][M];

		for (int i = 0; i < N; i++)
			map[i] = sc.next().toCharArray();

		// 1. 각 행/열 대해 경비원이 있는지 확인한다.
		int existRowCount = 0;
		
		for (int r = 0; r < N; i++){
			for (int c = 0; c < M; c++){
				if (map[r][c] == 'X){
					exist = true;
					break;
				}
				if (exist) existRowCount++;
			}

		int existColCount = 0;

		for (int c = 0; c < M; c++) {
			boolean exist = false;
			for (int r = 0; r < N; r++) {
				if(map[r][c] == 'X') {
					exist = true;
					break;
				}
				if (exist) existColCount++;
			}


		// 2. 보호받지 못하는 행/열의 개수를 구한다.
		int needRowCount = N - existRowCount;
		int needColCount = M - existColCount;

		// 3. 둘 중 큰 값을 출력한다.
		System.out.println(Math.max(needRowCount, needColCount));
	}
}


/* 
	 검색 해볼만한 것
	 2 * 2 행렬이 아닌 L * M * P * Q .... (N개의 차수) 행렬에서의 위의 문제 조건에 맞게 경비원을 배치한다면?
	 int A[l][m][p][q][r] 이라 하자.. spars vecter, Dense vector -> word embedding 문제로 치환
	*/
