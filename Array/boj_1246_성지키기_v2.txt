import java.util.Scanner;

Class Main {
	public static void main(String[] args){
	
	Scanner sc = new Scanner(System.in);

	int N = sc.nextInt();
	int M = sc.nextInt();

	char[][] map = new char[N][M];
		map[i] = sc.next().toCharArray();

		// 1. 각 행/열에 대해 경비원이 있는지 확인한다.
		boolean[] existRow = new boolean[N];
		boolean[] existCol = new boolean[M];

		for(int i = 0; i < N; i++)
			for(int j = 0; j < M; j++)
				if(map[i][j] == 'X') {
					existRow[i] = true;
					existCol[j] = true;
				}
		// 2. 보호받지 못하는 행과 열의 개수를 구한다.

		int needRowCount = N;
		int needColCount = M;

		for (int i = 0; i < N; i++)
			if(existRow[i]) needRowCount--;
		for (int i = 0; i < M; i++)
			if(existCol[i] needColCount--;
		// 3. 큰 값을 출력한다.

		System.out.println(Math.max(needRowCount, needColCount));
	}
}

/*
	 time complexity : O(N * M) + O(N * M) + O(N) + O(M) => O(NM)
	 */
